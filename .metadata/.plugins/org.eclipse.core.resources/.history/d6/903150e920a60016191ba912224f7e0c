package kai.system.states;

import kai.system.devices.DevicesFactory;
import kai.system.devices.ExternalDevice;
import kai.system.system.Kai;

public class SendingState extends States {
	
	// Variables to parse user message
	private static ExternalDevice ext = DevicesFactory.createExtDevice();
	private static String rosMsg;
	
	public void execute(Kai kai) {
		printCurrentState();
		// Try sending message to ROS and if fails,
		// Set ROS connection false, forward to connecting state
		// Else remain in state until time expired then move to
		// receive State

		System.out.println("Kai thread: " + Thread.currentThread().getName());

		// Parse the message in the buffer
		if (kai.messageReceived()) {
			// Message actually received from user, let's parse it
			ext.reset();
			ext.parse(kai.getMessage());
			rosMsg = ext.rosDevToString();
			
			// Reset user message buffer
			kai.clearMessage();
			
			// for now print that message
			System.out.println("Sending " + rosMsg + " to ROS");
			
			// ROS sending methods
			// if ROS system is doing, set nxtState to Error
			
			// Else next state is receiving state
			nxtState = StatesFactory.getState(StatesFactory.RECEIVING_STATE);
		}
		
		// Move to next State
		Kai.state = nxtState;
		nxtState.execute(kai);
	}
}