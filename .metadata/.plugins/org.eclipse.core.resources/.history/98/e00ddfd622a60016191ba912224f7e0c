package kai.system.system;

import java.net.URISyntaxException;

import javax.json.Json;

import org.json.JSONObject;

import edu.wpi.rail.jrosbridge.Ros;
import edu.wpi.rail.jrosbridge.Topic;
import edu.wpi.rail.jrosbridge.messages.Message;
import io.socket.client.IO;
import io.socket.client.Socket;
import io.socket.emitter.Emitter;
import kai.system.states.States;
import kai.system.states.StatesFactory;
import main.java.Start;

public class KaiOld {
	// Member variables
	private static Ros ros;
	private static Socket socket;
	public static States state;

	// Members connections
	private String webHost;
	private String rosHost;
	private int rosPort;

	// Status member variables
	public boolean rosConStatus = false;
	public boolean webConStatus = false;
	public boolean dbConStatus = false;

	// User Message buffer
	private static boolean msg_received = false;
	private static String msg = "";
	private Topic dev1Topic;

	/*
	 * *************************************************** SYSTEM METHODS
	 ***************************************************/
	// Creating new ROS connection
	public void RosConnection() {
		ros = new Ros(rosHost, rosPort);
		dev1Topic = new Topic(ros, "/Config_vals", "std_msgs/String");
	}

	// Creating new Socket Connection
	// Set Web Connection
	public void setSocketConnection(Socket s) {
		socket = s;
	}

	public void SocketConnection() {
		resetSystem();
		try {
			socket = IO.socket(webHost);
			socket.emit("connected_user", "Java Application");
			socket.on("connection_confirmation", new Emitter.Listener() {
				public void call(Object... args) {
					// Do nothing for now.
					// This simply activate the event handler thread
					System.out.println("black");
					KaiOld.state = StatesFactory.getState(StatesFactory.RECEIVING_STATE);
//					state.execute(Kai.this);
				}
			});
			retrieveExternalMsg();
			socket.connect();
		} catch (URISyntaxException e) {
			System.out.println("Error in establishing connection");
		}
	}

	public boolean isWebConnected() {
		return (socket == null) ? false : socket.connected();
	}

	// Reset the system variables
	public void resetSystem() {
		// Clear all the necessary variables
		clearMessage();
	}

	// Run the program
	public void run() {
		if (state == null) {
			state = StatesFactory.getState(StatesFactory.BOOT_UP_STATE);
		}
//		state.execute(this);
	}

	/*
	 * *************************************************** MESSAGES METHODS
	 ***************************************************/
	public void retrieveExternalMsg() {
		socket.on("device status", new Emitter.Listener() {
			public void call(Object... args) {
				JSONObject obj = (JSONObject) args[0];

				// Clear last message
				clearMessage();
				setMessage(obj.toString());
				System.out.println("State interrupt by user");
				System.out.println("Main Thread state: " + Start.mainThread.getState());
				System.out.println("Current Thread state: " + Thread.currentThread().getState());
				KaiOld.state = StatesFactory.getState(StatesFactory.SENDING_STATE);
				System.out.println("Done with state modification");
			}
		});
	}

	public void clearMessage() {
		msg_received = false;
		msg = null;
	}

	public boolean sendMsg2ROS(String msg) {
		if (dev1Topic == null) {
			return false;
		}
		Message tmpMsg = new Message(Json.createObjectBuilder().add("data", msg).build());
		dev1Topic.publish(tmpMsg);
		return true;
	}

	/*
	 * *************************************************** SETTER METHODS
	 ***************************************************/
	public void setConnectionInfo(String webHost, String rosHost, int rosPort) {
		this.webHost = webHost;
		this.rosHost = rosHost;
		this.rosPort = rosPort;
	}

	public void setState(States s) {
		state = s;
	}

	public void setMessage(String m) {
		msg_received = true;
		msg = m;
	}

	public boolean messageReceived() {
		return msg_received;
	}

	/*
	 * *************************************************** GETTER METHODS
	 ***************************************************/
	public Ros getRos() {
		return ros;
	}

	public Socket getSocket() {
		return socket;
	}

	public States getState() {
		return state;
	}

	public String getMessage() {
		return msg;
	}

	public Topic getDev1Topic() {
		return dev1Topic;
	}
}
